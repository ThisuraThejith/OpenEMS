/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.itp.customer.management;

import java.awt.Frame;
import java.sql.Connection;
import java.sql.PreparedStatement;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import java.sql.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.table.TableModel;

/**
 *
 * @author CHATHURAAKSHA
 */
public class Customer extends javax.swing.JFrame {

    Connection con = null;
    PreparedStatement pst = null;
    ResultSet rs1;

    /**
     * Creates new form Customer
     */
    public Customer() {
        JLabel ID = jID;
        initComponents();
        con = DBconnect.connect();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        buttonGroup2 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTitle = new javax.swing.JComboBox();
        jLabel3 = new javax.swing.JLabel();
        jFName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jLName = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jNIC = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jAds1 = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        jAds2 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jCity = new javax.swing.JComboBox();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jOffice = new javax.swing.JTextField();
        jLabel11 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jMale = new javax.swing.JRadioButton();
        jFemale = new javax.swing.JRadioButton();
        jLabel14 = new javax.swing.JLabel();
        jOrdinary = new javax.swing.JRadioButton();
        jBulk = new javax.swing.JRadioButton();
        jMobile = new javax.swing.JTextField();
        jPanel2 = new javax.swing.JPanel();
        nicLbl = new javax.swing.JLabel();
        fnameLbl = new javax.swing.JLabel();
        lnameLbl = new javax.swing.JLabel();
        ads1Lbl = new javax.swing.JLabel();
        ads2Lbl = new javax.swing.JLabel();
        cityLbl = new javax.swing.JLabel();
        titleLbl = new javax.swing.JLabel();
        mblLbl = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jEmail = new javax.swing.JTextField();
        ofcLbl = new javax.swing.JLabel();
        emailLbl = new javax.swing.JLabel();
        jLevel = new javax.swing.JComboBox();
        jLabel15 = new javax.swing.JLabel();
        lvlLbl = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable_tableitp = new javax.swing.JTable();
        jAdd = new javax.swing.JButton();
        jKeyword = new javax.swing.JTextField();
        jSearch = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jUpdate = new javax.swing.JButton();
        jDelete = new javax.swing.JButton();
        jClear = new javax.swing.JButton();
        jexit = new javax.swing.JButton();
        jButton1 = new javax.swing.JButton();
        jLabel16 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jID = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Customer");
        setMinimumSize(new java.awt.Dimension(1500, 735));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/itp/image/log.png"))); // NOI18N
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(140, 0, 980, 50));

        jLabel2.setForeground(new java.awt.Color(0, 102, 102));
        jLabel2.setText("Title");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 80, -1, -1));

        jTitle.setForeground(new java.awt.Color(0, 102, 102));
        jTitle.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Select Title-", "Mr", "Mrs", "Miss", "Dr" }));
        jTitle.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jTitleFocusLost(evt);
            }
        });
        getContentPane().add(jTitle, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, 110, -1));

        jLabel3.setForeground(new java.awt.Color(0, 102, 102));
        jLabel3.setText("First Name");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 110, -1, -1));

        jFName.setForeground(new java.awt.Color(0, 102, 102));
        jFName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jFNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFNameFocusLost(evt);
            }
        });
        getContentPane().add(jFName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 110, 110, -1));

        jLabel4.setForeground(new java.awt.Color(0, 102, 102));
        jLabel4.setText("Last Name");
        getContentPane().add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, -1, -1));

        jLName.setForeground(new java.awt.Color(0, 102, 102));
        jLName.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLNameFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jLNameFocusLost(evt);
            }
        });
        getContentPane().add(jLName, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 150, 110, -1));

        jLabel5.setForeground(new java.awt.Color(0, 102, 102));
        jLabel5.setText("NIC");
        getContentPane().add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 190, -1, -1));

        jNIC.setForeground(new java.awt.Color(0, 102, 102));
        jNIC.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jNICMouseExited(evt);
            }
        });
        jNIC.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jNICFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jNICFocusLost(evt);
            }
        });
        jNIC.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jNICKeyPressed(evt);
            }
        });
        getContentPane().add(jNIC, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 190, 110, -1));

        jLabel6.setForeground(new java.awt.Color(0, 102, 102));
        jLabel6.setText("Address 1");
        getContentPane().add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 230, -1, -1));

        jAds1.setForeground(new java.awt.Color(0, 102, 102));
        jAds1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jAds1FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jAds1FocusLost(evt);
            }
        });
        getContentPane().add(jAds1, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 230, 110, 40));

        jLabel7.setForeground(new java.awt.Color(0, 102, 102));
        jLabel7.setText("Address 2");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 300, -1, -1));

        jAds2.setForeground(new java.awt.Color(0, 102, 102));
        jAds2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jAds2FocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jAds2FocusLost(evt);
            }
        });
        getContentPane().add(jAds2, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 290, 110, 50));

        jLabel8.setForeground(new java.awt.Color(0, 102, 102));
        jLabel8.setText("City");
        getContentPane().add(jLabel8, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 360, -1, -1));

        jCity.setForeground(new java.awt.Color(0, 102, 102));
        jCity.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Select City-", "Colombo", "Negombo", "Galle", "Matara", "Jaffna", "Kadawata", "Chilaw" }));
        jCity.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jCityFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jCityFocusLost(evt);
            }
        });
        getContentPane().add(jCity, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 360, 100, -1));

        jLabel9.setForeground(new java.awt.Color(0, 102, 102));
        jLabel9.setText("Telephone");
        getContentPane().add(jLabel9, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 440, -1, -1));

        jLabel10.setForeground(new java.awt.Color(0, 102, 102));
        jLabel10.setText("Mobile");
        getContentPane().add(jLabel10, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 480, -1, -1));

        jOffice.setForeground(new java.awt.Color(0, 102, 102));
        jOffice.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jOfficeFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jOfficeFocusLost(evt);
            }
        });
        getContentPane().add(jOffice, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 480, 100, -1));

        jLabel11.setForeground(new java.awt.Color(0, 102, 102));
        jLabel11.setText("Office");
        getContentPane().add(jLabel11, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 480, -1, -1));

        jLabel13.setForeground(new java.awt.Color(0, 102, 102));
        jLabel13.setText("Gender");
        getContentPane().add(jLabel13, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 404, -1, 20));

        buttonGroup1.add(jMale);
        jMale.setForeground(new java.awt.Color(0, 102, 102));
        jMale.setText("Male");
        jMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMaleActionPerformed(evt);
            }
        });
        jMale.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jMaleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jMaleFocusLost(evt);
            }
        });
        getContentPane().add(jMale, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 400, -1, -1));

        buttonGroup1.add(jFemale);
        jFemale.setForeground(new java.awt.Color(0, 102, 102));
        jFemale.setText("Female");
        jFemale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFemaleActionPerformed(evt);
            }
        });
        jFemale.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jFemaleFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jFemaleFocusLost(evt);
            }
        });
        getContentPane().add(jFemale, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 400, -1, -1));

        jLabel14.setForeground(new java.awt.Color(0, 102, 102));
        jLabel14.setText("Customer Category");
        getContentPane().add(jLabel14, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 564, -1, 20));

        buttonGroup2.add(jOrdinary);
        jOrdinary.setForeground(new java.awt.Color(0, 102, 102));
        jOrdinary.setText("Ordinary Customer");
        jOrdinary.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOrdinaryActionPerformed(evt);
            }
        });
        jOrdinary.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jOrdinaryFocusGained(evt);
            }
        });
        getContentPane().add(jOrdinary, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 580, -1, 30));

        buttonGroup2.add(jBulk);
        jBulk.setForeground(new java.awt.Color(0, 102, 102));
        jBulk.setText("Bulk Customer");
        jBulk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBulkActionPerformed(evt);
            }
        });
        jBulk.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jBulkFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jBulkFocusLost(evt);
            }
        });
        getContentPane().add(jBulk, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 580, -1, 30));

        jMobile.setForeground(new java.awt.Color(0, 102, 102));
        jMobile.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jMobileFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jMobileFocusLost(evt);
            }
        });
        getContentPane().add(jMobile, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 480, 100, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer Details"));
        jPanel2.setForeground(new java.awt.Color(0, 102, 102));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        nicLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(nicLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 140, 170, 20));

        fnameLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(fnameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 60, 170, 20));

        lnameLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(lnameLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 100, 170, 20));

        ads1Lbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(ads1Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 190, 170, 20));

        ads2Lbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(ads2Lbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 250, 170, 20));

        cityLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(cityLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 310, 170, 20));

        titleLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(titleLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(220, 30, 170, 20));

        mblLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(mblLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 454, 180, 20));

        jLabel12.setForeground(new java.awt.Color(0, 102, 102));
        jLabel12.setText("e-mail");
        jPanel2.add(jLabel12, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 480, -1, -1));

        jEmail.setForeground(new java.awt.Color(0, 102, 102));
        jEmail.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jEmailFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jEmailFocusLost(evt);
            }
        });
        jPanel2.add(jEmail, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 480, 100, -1));

        ofcLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(ofcLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 460, 160, 20));

        emailLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(emailLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 480, 170, 20));

        jLevel.setForeground(new java.awt.Color(0, 102, 102));
        jLevel.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "-Select Customer Level-", "Default Customer", "Level 1", "Level 2", "Level 3", "Level 4", "Level 5", "Level 6", "Level 7", "Level 8", "Level 9", "Level 10", "Inner Circle Customer", "Bronze Customer", "Silver Customer", "Gold Customer", "Platinum Customer" }));
        jLevel.setMinimumSize(new java.awt.Dimension(84, 20));
        jLevel.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jLevelFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                jLevelFocusLost(evt);
            }
        });
        jPanel2.add(jLevel, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 580, 180, -1));

        jLabel15.setForeground(new java.awt.Color(0, 102, 102));
        jLabel15.setText("Customer Level");
        jPanel2.add(jLabel15, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 580, -1, 20));

        lvlLbl.setForeground(new java.awt.Color(255, 0, 0));
        jPanel2.add(lvlLbl, new org.netbeans.lib.awtextra.AbsoluteConstraints(110, 610, 220, 20));

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 50, 400, 650));

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Customer Details"));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jTable_tableitp.setFont(new java.awt.Font("Times New Roman", 3, 12)); // NOI18N
        jTable_tableitp.setForeground(new java.awt.Color(102, 0, 102));
        jTable_tableitp.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "CusID", "Title ", "FName", "LName", "NIC", "Add 1", "Add 2", "City", "Gender", "Mobile", "Office", "email", "Category", "Level"
            }
        ));
        jTable_tableitp.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jTable_tableitp.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable_tableitpMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable_tableitp);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(9, 21, 910, -1));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 60, 930, 460));

        jAdd.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jAdd.setForeground(new java.awt.Color(0, 102, 102));
        jAdd.setText("Add");
        jAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jAddActionPerformed(evt);
            }
        });
        getContentPane().add(jAdd, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 623, 90, 40));

        jKeyword.setForeground(new java.awt.Color(0, 102, 102));
        getContentPane().add(jKeyword, new org.netbeans.lib.awtextra.AbsoluteConstraints(560, 540, 80, -1));

        jSearch.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jSearch.setForeground(new java.awt.Color(0, 102, 102));
        jSearch.setText("Search");
        jSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSearchActionPerformed(evt);
            }
        });
        getContentPane().add(jSearch, new org.netbeans.lib.awtextra.AbsoluteConstraints(450, 570, 90, 40));

        jPanel3.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));
        jPanel3.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jUpdate.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jUpdate.setForeground(new java.awt.Color(0, 102, 102));
        jUpdate.setText("Update");
        jUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jUpdateActionPerformed(evt);
            }
        });
        jPanel3.add(jUpdate, new org.netbeans.lib.awtextra.AbsoluteConstraints(150, 100, 80, 40));

        jDelete.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jDelete.setForeground(new java.awt.Color(0, 102, 102));
        jDelete.setText("Delete");
        jDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDeleteActionPerformed(evt);
            }
        });
        jPanel3.add(jDelete, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 100, 80, 40));

        jClear.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jClear.setForeground(new java.awt.Color(0, 102, 102));
        jClear.setText("Clear");
        jClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jClearActionPerformed(evt);
            }
        });
        jPanel3.add(jClear, new org.netbeans.lib.awtextra.AbsoluteConstraints(250, 20, 70, 30));

        jexit.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jexit.setForeground(new java.awt.Color(0, 102, 102));
        jexit.setText("Exit");
        jexit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jexitActionPerformed(evt);
            }
        });
        jPanel3.add(jexit, new org.netbeans.lib.awtextra.AbsoluteConstraints(360, 20, 60, 30));

        jButton1.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton1.setForeground(new java.awt.Color(0, 102, 102));
        jButton1.setText("Back");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel3.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 60, 70, 30));

        jLabel16.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jLabel16.setForeground(new java.awt.Color(0, 102, 102));
        jLabel16.setText("Search Keyword");
        jPanel3.add(jLabel16, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 20, -1, -1));

        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/itp/image/b1.jpg"))); // NOI18N
        jPanel3.add(jLabel18, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 500, 170));

        getContentPane().add(jPanel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(410, 520, 500, 170));

        jButton7.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        jButton7.setForeground(new java.awt.Color(0, 102, 102));
        jButton7.setText("Log Out");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });
        getContentPane().add(jButton7, new org.netbeans.lib.awtextra.AbsoluteConstraints(1220, 10, -1, -1));
        getContentPane().add(jID, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 30, 50, 20));

        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/itp/image/b2.jpg"))); // NOI18N
        getContentPane().add(jLabel17, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 1470, 680));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents


    private void jexitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jexitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_jexitActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        {
            this.setVisible(false);
            new Login().setVisible(true);
        }
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jClearActionPerformed
        jFName.setText("");
        jLName.setText("");
        jNIC.setText("");
        jAds1.setText("");
        jAds2.setText("");
        jMobile.setText("");
        jOffice.setText("");
        jEmail.setText("");
        jKeyword.setText("");
        jLevel.setSelectedItem("-Select Customer Level-");
        jTitle.setSelectedItem("-Select Title-");
        jCity.setSelectedItem("-Select City-");
        titleLbl.setText("");
        fnameLbl.setText("");
        lnameLbl.setText("");
        nicLbl.setText("");
        ads1Lbl.setText("");
        ads2Lbl.setText("");
        cityLbl.setText("");
        mblLbl.setText("");
        ofcLbl.setText("");
        emailLbl.setText("");
        lvlLbl.setText("");


    }//GEN-LAST:event_jClearActionPerformed

    private void jAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jAddActionPerformed
  //      if (jTitle.getSelectedItem().toString().isEmpty() || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().toString().isEmpty() || gender.isEmpty() || jMobile.getText().isEmpty() || jOffice.getText().isEmpty() || jEmail.getText().isEmpty() || CustomerType.isEmpty() || jLevel.getSelectedItem().toString().isEmpty()) {
        //           JOptionPane.showMessageDialog(null, "Please Enter Valid Inputs !");
        //      }

//        } 
//        else if(!Validation.ValidLName(jLName.getText())){
//        JOptionPane.showMessageDialog(null, "Please Enter the Valid name");
//        return;
//       
//        
//        }
//        else if(!Validation.ValidFName(jFName.getText())){
//        JOptionPane.showMessageDialog(null, "Please Enter the Valid name");
//        return;
//        }
//        else if(!Validation.ValidAddress(jAds1.getText())){
//        JOptionPane.showMessageDialog(null, "Please Enter Valid Address");
//        return;
//        }
//        else if(!Validation.ValidAddress(jAds2.getText())){
//        JOptionPane.showMessageDialog(null, "Please Enter Valid Address");
//        return;
//        }
//        else if(!Validation.validateEmail(jEmail.getText())){
//        
//        JOptionPane.showMessageDialog(null, "Please Enter Valid Email Address");
//        }
        //  else {
        String Title = jTitle.getSelectedItem().toString();
        String FName = jFName.getText();
        String LName = jLName.getText();
        String NIC = jNIC.getText();
        String Ads1 = jAds1.getText();
        String Ads2 = jAds2.getText();
        String City = jCity.getSelectedItem().toString();
        String Gender = gender;
        String Mobile = jMobile.getText();
        String Office = jOffice.getText();
        String Email = jEmail.getText();
        String CusType = CustomerType;
        String Level = jLevel.getSelectedItem().toString();
//        
//            if (!validateNic(NIC)) {
//                JOptionPane.showMessageDialog(null, "Invalid NIC");
//
//                jNIC.setText("");
//                return;
//
//            }

    //     if (jTitle.getSelectedItem().toString().isEmpty() || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().toString().isEmpty() || gender.isEmpty() || jMobile.getText().isEmpty() || jOffice.getText().isEmpty() || jEmail.getText().isEmpty() || CustomerType.isEmpty() || jLevel.getSelectedItem().toString().isEmpty()) {
        //         JOptionPane.showMessageDialog(null, "Please Enter Valid Inputs !");   
        if (Validation.ValidFName(FName)) {
            if (Validation.ValidLName(LName)) {
                if (Validation.ValidNIC(NIC)) {
                    if (Validation.ValidAddress(Ads1)) {
                        if (Validation.ValidAddress(Ads2)) {
                            if (Validation.validateTel(Mobile)) {
                                if (Validation.validateTel(Office)) {
                                    if (Validation.validateEmail(Email)) {

                                        try {
                                            String query = "INSERT INTO customer(Title,FName,LName,NIC,Ad1,Ad2,City,Gender,Mobile,Office,email,Type,Level) values ('" + Title + "', '" + FName + "', '" + LName + "', '" + NIC + "', '" + Ads1 + "', '" + Ads2 + "', '" + City + "', '" + Gender + "', '" + Mobile + "', '" + Office + "', '" + Email + "', '" + CusType + "', '" + Level + "')";
                                            pst = con.prepareStatement(query);
                                            pst.execute();
                                            JOptionPane.showMessageDialog(null, "Data Saved Succussfully");

                                        } catch (Exception e) {
                                            System.out.println(e);
                                        }

                                    } else {
                                        JOptionPane.showMessageDialog(null, "Invalide Email");
                                    }
                                } else {
                                    JOptionPane.showMessageDialog(null, "Invalide Office");
                                }
                            } else {
                                JOptionPane.showMessageDialog(null, "Invalide Mobile");
                            }
                        } else {
                            JOptionPane.showMessageDialog(null, "Invalide Ads2");
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "Invalide Ads1");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Invalide NIC");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Invalide Lname");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Invalide Fname");
        }
        //   }
        //  else{
        //   JOptionPane.showMessageDialog(null,"Invalide Fname");
        //   }

        DefaultTableModel model = (DefaultTableModel) jTable_tableitp.getModel();
        String kword = jFName.getText();
            //String kword="lab";
        //String sqlstsmt = "select * from customer where Title like '%" + kword + "%' or FName like '%" + kword + "%' or LName like '%" + kword + "%' or NIC like '%" + kword + "%' or Ad1 like '%" + kword + "%' or Ad2 like '%" + kword + "%' or City like '%" + kword + "%' or Gender like '%" + kword + "%' or Mobile like '%" + kword + "%' or Office like '%" + kword + "%'or email like '%" + kword + "%'or Type like '%" + kword + "%'or Level like '%" + kword + "%'"
        //      ;

        String sqlstsmt = "select * from customer order by CusID desc limit 1";
        //String sqlstsmt="select * from jobs where location like '%lab%'";
        FillTable(jTable_tableitp, sqlstsmt);
        //   }
    }//GEN-LAST:event_jAddActionPerformed

    private void jMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMaleActionPerformed
        gender = "Male";
    }//GEN-LAST:event_jMaleActionPerformed

    private void jFemaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFemaleActionPerformed
        gender = "Female";
    }//GEN-LAST:event_jFemaleActionPerformed

    private void jOrdinaryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOrdinaryActionPerformed
        CustomerType = "Ordinary";
        jLevel.setSelectedItem("Default Customer");
    }//GEN-LAST:event_jOrdinaryActionPerformed

    private void jBulkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBulkActionPerformed
        CustomerType = "Bulk";
    }//GEN-LAST:event_jBulkActionPerformed

    private void jSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSearchActionPerformed
        try {
            String kword = jKeyword.getText();
            //String kword="lab";
            String sqlstsmt = "select * from customer where Title like '%" + kword + "%' or FName like '%" + kword + "%' or LName like '%" + kword + "%' or NIC like '%" + kword + "%' or Ad1 like '%" + kword + "%' or Ad2 like '%" + kword + "%' or City like '%" + kword + "%' or Gender like '%" + kword + "%' or Mobile like '%" + kword + "%' or Office like '%" + kword + "%'or email like '%" + kword + "%'or Type like '%" + kword + "%'or Level like '%" + kword + "%'";
            //String sqlstsmt="select * from jobs where location like '%lab%'";
            FillTable(jTable_tableitp, sqlstsmt);
        } catch (Exception e) {
            System.err.println(e.getMessage());
        }
    }//GEN-LAST:event_jSearchActionPerformed

    private void jTable_tableitpMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable_tableitpMouseClicked
        int i = jTable_tableitp.getSelectedRow();
        TableModel model = jTable_tableitp.getModel();
        jTitle.setSelectedItem(model.getValueAt(i, 1).toString());
        jFName.setText(model.getValueAt(i, 2).toString());
        jLName.setText(model.getValueAt(i, 3).toString());
        jNIC.setText(model.getValueAt(i, 4).toString());
        //  jLevel.setSelectedItem(model.getValueAt(i, 4).toString());
        jAds1.setText(model.getValueAt(i, 5).toString());
        jAds2.setText(model.getValueAt(i, 6).toString());
        jCity.setSelectedItem(model.getValueAt(i, 7).toString());
        jMobile.setText(model.getValueAt(i, 9).toString());
        jOffice.setText(model.getValueAt(i, 10).toString());
        jEmail.setText(model.getValueAt(i, 11).toString());
        jLevel.setSelectedItem(model.getValueAt(i, 13).toString());
        String Type = model.getValueAt(i, 12).toString();
        if (Type.equals("Bulk")) {
            jBulk.setSelected(true);
        } else {

            jOrdinary.setSelected(true);
        }

        String gender = model.getValueAt(i, 8).toString();
        if (gender.equals("Male")) {
            jMale.setSelected(true);
        } else {

            jFemale.setSelected(true);
        }

        //jMale.setText((model.getValueAt(i, 5).toString());
    }//GEN-LAST:event_jTable_tableitpMouseClicked

    private void jUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jUpdateActionPerformed
        try {
            /*String query="  DELETE FROM `customer` WHERE CusID=?";
             pst.execute();
             JOptionPane.showMessageDialog(null, "Data Deleted Succussfully");*/

            int selectedRow = jTable_tableitp.getSelectedRow();
            //int cusID=jTable_tableitp.g

            if (selectedRow != -1) {
                int CusID = (int) jTable_tableitp.getValueAt(selectedRow, 0);

                String query = "UPDATE customer SET Title='" + jTitle.getSelectedItem() + "',FName='" + jFName.getText() + "',LName='" + jLName.getText() + "',NIC='" + jNIC.getText() + "',Ad1='" + jAds1.getText() + "',Ad2='" + jAds2.getText() + "',City='" + jCity.getSelectedItem() + "',Gender='" + gender + ",Mobile='" + jMobile.getText() + "',Office='" + jOffice.getText() + "',email='" + jEmail.getText() + "',Type='" + CustomerType + "',Level='" + jCity.getSelectedItem() + "' WHERE Cusid=" + CusID + "";

                System.out.println(query);
                try {
                    pst = con.prepareStatement(query);
                    pst.execute();

                    JOptionPane.showMessageDialog(null, "Customer updated");

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Customer update failed");
                    System.out.println(ex);
                    return;
                }

                /*   try {
                 //String kword = jKeyword.getText();
                 //String kword="lab";
                 String sqlstsmt = "select * from customer ";
                 //String sqlstsmt="select * from jobs where location like '%lab%'";
                 FillTable(jTable_tableitp, sqlstsmt);
                 } catch (Exception e) {
                 System.err.println(e.getMessage());
                 }*/
            } else {
                JOptionPane.showMessageDialog(null, "No Item Selected");
            }

        } catch (Exception e) {
            System.out.println(e);
        }
        /*
         try {
         String query = "UPDATE customer SET `Title`='" + jTitle.getSelectedItem() + "',`FName`='" + jFName.getText() + "',`LName`='" + jLName.getText() + "',`NIC`='" + jNIC.getText() + "',`Ad1`='" + jAds1.getText() + "',`Ad2`='" + jAds2.getText() + "',`City`='" + jCity.getSelectedItem() + "',`Gender`='" + gender + ",`Mobile`='" + jMobile.getText() + "',`Office`='" + jOffice.getText() + "',`email`='" + jEmail.getText() + "',`Type`='" + CustomerType + "',`Level`='" + jCity.getSelectedItem() + "' WHERE ='" + CusID + "'";
         pst = con.prepareStatement(query);
         pst.execute();
         JOptionPane.showMessageDialog(null, "Data Updated Succussfully");

         } catch (Exception e) {
         System.out.println(e);
         }*/

    }//GEN-LAST:event_jUpdateActionPerformed

    private void jDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDeleteActionPerformed
        try {
            /*String query="  DELETE FROM `customer` WHERE CusID=?";
             pst.execute();
             JOptionPane.showMessageDialog(null, "Data Deleted Succussfully");*/

            int selectedRow = jTable_tableitp.getSelectedRow();

            if (selectedRow != -1) {
                int CusID = (int) jTable_tableitp.getValueAt(selectedRow, 0);

                String query = "DELETE FROM customer WHERE CusID= " + CusID + "";
                System.out.println(query);
                try {
                    pst = con.prepareStatement(query);
                    pst.execute();
                    JOptionPane.showMessageDialog(null, "Customer Deleted");

                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Customer Will Be Deleted After Clearing All Entries");
                    return;
                }

                try {
                    //String kword = jKeyword.getText();
                    //String kword="lab";
                    String sqlstsmt = "select * from customer ";
                    //String sqlstsmt="select * from jobs where location like '%lab%'";
                    FillTable(jTable_tableitp, sqlstsmt);
                } catch (Exception e) {
                    System.err.println(e.getMessage());
                }

            } else {
                JOptionPane.showMessageDialog(null, "No Item Selected");
            }

        } catch (Exception e) {
            System.out.println(e);
        }
    }//GEN-LAST:event_jDeleteActionPerformed

    private void jNICKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jNICKeyPressed


    }//GEN-LAST:event_jNICKeyPressed

    private void jNICMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jNICMouseExited

    }//GEN-LAST:event_jNICMouseExited

    private void jFNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFNameFocusLost
        if (this.jFName.getText().isEmpty()) {
            fnameLbl.setText("*This field is necessary");
        } else if (!Validation.ValidFName(this.jFName.getText())) {
            fnameLbl.setText("*Invalid First Name");
        } else {
            fnameLbl.setText(null);
        }


    }//GEN-LAST:event_jFNameFocusLost

    private void jLNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLNameFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty()) {

            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
        }

    }//GEN-LAST:event_jLNameFocusGained

    private void jLNameFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLNameFocusLost
        if (this.jLName.getText().isEmpty()) {
            lnameLbl.setText("*This field is necessary");
        } else if (!Validation.ValidLName(this.jLName.getText())) {
            lnameLbl.setText("*Invalid Last Name");
        } else {
            lnameLbl.setText(null);
        }

    }//GEN-LAST:event_jLNameFocusLost

    private void jNICFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jNICFocusGained

        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }

            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
        }

    }//GEN-LAST:event_jNICFocusGained

    private void jNICFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jNICFocusLost
        if (this.jNIC.getText().isEmpty()) {
            nicLbl.setText("*This field is necessary");
        } else if (!Validation.ValidNIC(this.jNIC.getText())) {
            nicLbl.setText("*Invalid NIC No");
        } else {
            nicLbl.setText(null);
        }
 int CusID = 0;
                    Connection con2 = DBconnect.connect();
        //String sqlq="select * from employees where fe1="+jTextField1.getText();
    //        String sqlstsmt = ?;
            //To remove previously added rows
                    String str = jNIC.getText();
                    String sqlstsmt="select * from customer where NIC=? ";
                    
                    
                    try (PreparedStatement pst = con2.prepareStatement(sqlstsmt)) {
                        pst.setString(1, this.jNIC.toString());
                        rs1 = pst.executeQuery();
                        
                        //    Connection connect = new DBconnect(Constants.USER, Constants.PASSWORD).getConnection();
                        //   PreparedStatement preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_EMPLOYEE_ID_BY_NIC);
                        pst.setString(1, this.jNIC.getText().toString());
                        ResultSet resultset = pst.executeQuery();
                        int count = 0;
                        while (resultset.next()) {
                            CusID = resultset.getInt("CusID");
                            count++;
                        }
                        if (count != 0) {
                            int CusId = CusID;JOptionPane.showMessageDialog(null, "An Customer with this NIC "
                                    + " is Already registered. Please Input Valid NIC", "Error", JOptionPane.ERROR_MESSAGE);
                           jNIC.setText("");
                            return;
                          
                        } else {
                            
                        }
                        resultset.close();
                        
                        
                        
                    }
                    
                    catch (SQLException ex) {
            Logger.getLogger(Customer.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jNICFocusLost

    private void jAds1FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jAds1FocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }

            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
        }

    }//GEN-LAST:event_jAds1FocusGained

    private void jAds1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jAds1FocusLost
        if (this.jAds1.getText().isEmpty()) {
            ads1Lbl.setText("*This field is necessary");
        } else if (!Validation.ValidAddress(this.jAds1.getText())) {
            ads1Lbl.setText("*Invalid Address");
        } else {
            ads1Lbl.setText(null);
        }

    }//GEN-LAST:event_jAds1FocusLost

    private void jAds2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jAds2FocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }

            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }
        }
    }//GEN-LAST:event_jAds2FocusGained

    private void jAds2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jAds2FocusLost
        if (this.jAds2.getText().isEmpty()) {
            ads2Lbl.setText("*This field is necessary");
        } else if (!Validation.ValidAddress(this.jAds2.getText())) {
            ads2Lbl.setText("*Invalid Address");
        } else {
            ads2Lbl.setText(null);
        }

    }//GEN-LAST:event_jAds2FocusLost

    private void jCityFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCityFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }

            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }
        }

    }//GEN-LAST:event_jCityFocusGained

    private void jCityFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jCityFocusLost
        if (this.jCity.getSelectedItem().equals("-Select City-")) {
            cityLbl.setText("*This field is necessary");
        } else {
            cityLbl.setText(null);
        }
    }//GEN-LAST:event_jCityFocusLost

    private void jMaleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMaleFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().equals("-Select City-")) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }

            if (this.jCity.getSelectedItem().equals("-Select City-")) {
                cityLbl.setText("*This field is necessary");
            }

        }


    }//GEN-LAST:event_jMaleFocusGained

    private void jTitleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTitleFocusLost
        if (this.jTitle.getSelectedItem().equals("-Select City-")) {
            titleLbl.setText("*This field is necessary");
        } else {
            titleLbl.setText(null);
        }

    }//GEN-LAST:event_jTitleFocusLost

    private void jFNameFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFNameFocusGained

        if (jTitle.getSelectedItem().equals("-Select Title-")) {
            titleLbl.setText("*This field is necessary");
        }

    }//GEN-LAST:event_jFNameFocusGained

    private void jFemaleFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFemaleFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().equals("-Select City-")) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }

            if (this.jCity.getSelectedItem().equals("-Select City-")) {
                cityLbl.setText("*This field is necessary");
            }
        }
    }//GEN-LAST:event_jFemaleFocusGained

    private void jMaleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMaleFocusLost


    }//GEN-LAST:event_jMaleFocusLost

    private void jFemaleFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jFemaleFocusLost

    }//GEN-LAST:event_jFemaleFocusLost

    private void jMobileFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMobileFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().equals("-Select City-")) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }

            if (this.jCity.getSelectedItem().equals("-Select City-")) {
                cityLbl.setText("*This field is necessary");
            }

        }
    }//GEN-LAST:event_jMobileFocusGained

    private void jMobileFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jMobileFocusLost
        if (this.jMobile.getText().isEmpty()) {
            mblLbl.setText("*This field is necessary");
        } else if (!Validation.validateTel(this.jMobile.getText())) {
            mblLbl.setText("*Invalid Mobile");
        } else {
            mblLbl.setText(null);
        }
    }//GEN-LAST:event_jMobileFocusLost

    private void jOfficeFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jOfficeFocusLost
        if (this.jOffice.getText().isEmpty()) {
            ofcLbl.setText("*This field is necessary");
        } else if (!Validation.validateTel(this.jOffice.getText())) {
            ofcLbl.setText("*Invalid Office Number");
        } else {
            ofcLbl.setText(null);
        }
    }//GEN-LAST:event_jOfficeFocusLost

    private void jOfficeFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jOfficeFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().equals("-Select City-") || jMobile.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }

            if (this.jCity.getSelectedItem().equals("-Select City-")) {
                cityLbl.setText("*This field is necessary");
            }
            if (jMobile.getText().isEmpty()) {
                mblLbl.setText("*This field is necessary");
            }

        }
    }//GEN-LAST:event_jOfficeFocusGained

    private void jEmailFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jEmailFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().equals("-Select City-") || jMobile.getText().isEmpty() || jOffice.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }

            if (this.jCity.getSelectedItem().equals("-Select City-")) {
                cityLbl.setText("*This field is necessary");
            }
            if (jMobile.getText().isEmpty()) {
                mblLbl.setText("*This field is necessary");
            }
            if (jOffice.getText().isEmpty()) {
                ofcLbl.setText("*This field is necessary");
            }
        }

    }//GEN-LAST:event_jEmailFocusGained

    private void jEmailFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jEmailFocusLost
        if (this.jEmail.getText().isEmpty()) {
            emailLbl.setText("*This field is necessary");
        } else if (!Validation.validateEmail(this.jEmail.getText())) {
            emailLbl.setText("*Invalid Email");
        } else {
            emailLbl.setText(null);
        }

    }//GEN-LAST:event_jEmailFocusLost

    private void jOrdinaryFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jOrdinaryFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().equals("-Select City-") || jMobile.getText().isEmpty() || jOffice.getText().isEmpty() || jEmail.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }

            if (this.jCity.getSelectedItem().equals("-Select City-")) {
                cityLbl.setText("*This field is necessary");
            }
            if (jMobile.getText().isEmpty()) {
                mblLbl.setText("*This field is necessary");
            }
            if (jOffice.getText().isEmpty()) {
                ofcLbl.setText("*This field is necessary");
            }
            if (jEmail.getText().isEmpty()) {
                emailLbl.setText("*This field is necessary");
            }
        }

    }//GEN-LAST:event_jOrdinaryFocusGained

    private void jBulkFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jBulkFocusLost
        // TODO add your handling code here:
    }//GEN-LAST:event_jBulkFocusLost

    private void jBulkFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jBulkFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().equals("-Select City-") || jMobile.getText().isEmpty() || jOffice.getText().isEmpty() || jEmail.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }

            if (this.jCity.getSelectedItem().equals("-Select City-")) {
                cityLbl.setText("*This field is necessary");
            }
            if (jMobile.getText().isEmpty()) {
                mblLbl.setText("*This field is necessary");
            }
            if (jOffice.getText().isEmpty()) {
                ofcLbl.setText("*This field is necessary");
            }
            if (jEmail.getText().isEmpty()) {
                emailLbl.setText("*This field is necessary");
            }
        }
    }//GEN-LAST:event_jBulkFocusGained

    private void jLevelFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLevelFocusGained
        if (jTitle.getSelectedItem().equals("-Select Title-") || jFName.getText().isEmpty() || jLName.getText().isEmpty() || jNIC.getText().isEmpty() || jAds1.getText().isEmpty() || jAds2.getText().isEmpty() || jCity.getSelectedItem().equals("-Select City-") || jMobile.getText().isEmpty() || jOffice.getText().isEmpty() || jEmail.getText().isEmpty()) {
            if (jTitle.getSelectedItem().equals("-Select Title-")) {
                titleLbl.setText("*This field is necessary");
            }
            if (jFName.getText().isEmpty()) {
                fnameLbl.setText("*This field is necessary");
            }
            if (jLName.getText().isEmpty()) {
                lnameLbl.setText("*This field is necessary");
            }
            if (jNIC.getText().isEmpty()) {
                nicLbl.setText("*This field is necessary");
            }
            if (jAds1.getText().isEmpty()) {
                ads1Lbl.setText("*This field is necessary");
            }

            if (jAds2.getText().isEmpty()) {
                ads2Lbl.setText("*This field is necessary");
            }

            if (this.jCity.getSelectedItem().equals("-Select City-")) {
                cityLbl.setText("*This field is necessary");
            }
            if (jMobile.getText().isEmpty()) {
                mblLbl.setText("*This field is necessary");
            }
            if (jOffice.getText().isEmpty()) {
                ofcLbl.setText("*This field is necessary");
            }
            if (jEmail.getText().isEmpty()) {
                emailLbl.setText("*This field is necessary");
            }
        }

    }//GEN-LAST:event_jLevelFocusGained

    private void jLevelFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jLevelFocusLost
        if (this.jLevel.getSelectedItem().equals("-Select City-")) {
            lvlLbl.setText("*This field is necessary");
        } else {
            lvlLbl.setText(null);
        }
    }//GEN-LAST:event_jLevelFocusLost

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
        new Admin().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed
    public void FillTable(JTable table, String sqlq) {
        try {
            Connection con2 = DBconnect.connect();
        //String sqlq="select * from employees where fe1="+jTextField1.getText();

            //To remove previously added rows
            PreparedStatement pst = con2.prepareStatement(sqlq);
            rs1 = pst.executeQuery();
            while (table.getRowCount() > 0) {
                ((DefaultTableModel) table.getModel()).removeRow(0);
            }
            int columns = rs1.getMetaData().getColumnCount();
            while (rs1.next()) {
                Object[] row = new Object[columns];
                for (int i = 1; i <= columns; i++) {
                    row[i - 1] = rs1.getObject(i);
                }
                ((DefaultTableModel) table.getModel()).insertRow(rs1.getRow() - 1, row);
            }

            rs1.close();
        } catch (SQLException e) {

        }
    }

    public boolean validateNic(String nic) {

        if (nic == null || nic.length() != 10) {
            return false;
        }

        if (nic.charAt(9) != 'V' || nic.charAt(9) != 'v') {
            return false;
        }

        if (nic.charAt(9) != 'X') {
            return false;
        }
        for (int i = 0; i <= 8; i++) {
            if (!Character.isDigit(nic.charAt(i))) {
                return false;
            }

        }

        return true;

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Customer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Customer().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel ads1Lbl;
    private javax.swing.JLabel ads2Lbl;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JLabel cityLbl;
    private javax.swing.JLabel emailLbl;
    private javax.swing.JLabel fnameLbl;
    private javax.swing.JButton jAdd;
    private javax.swing.JTextField jAds1;
    private javax.swing.JTextField jAds2;
    private javax.swing.JRadioButton jBulk;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton7;
    private javax.swing.JComboBox jCity;
    private javax.swing.JButton jClear;
    private javax.swing.JButton jDelete;
    private javax.swing.JTextField jEmail;
    private javax.swing.JTextField jFName;
    private javax.swing.JRadioButton jFemale;
    private javax.swing.JLabel jID;
    private javax.swing.JTextField jKeyword;
    private javax.swing.JTextField jLName;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JComboBox jLevel;
    private javax.swing.JRadioButton jMale;
    private javax.swing.JTextField jMobile;
    private javax.swing.JTextField jNIC;
    private javax.swing.JTextField jOffice;
    private javax.swing.JRadioButton jOrdinary;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton jSearch;
    private javax.swing.JTable jTable_tableitp;
    private javax.swing.JComboBox jTitle;
    private javax.swing.JButton jUpdate;
    private javax.swing.JButton jexit;
    private javax.swing.JLabel lnameLbl;
    private javax.swing.JLabel lvlLbl;
    private javax.swing.JLabel mblLbl;
    private javax.swing.JLabel nicLbl;
    private javax.swing.JLabel ofcLbl;
    private javax.swing.JLabel titleLbl;
    // End of variables declaration//GEN-END:variables
private String gender;
    private String CustomerType;

//    private final int ID=Integer.parseInt(jID.getText());
}
