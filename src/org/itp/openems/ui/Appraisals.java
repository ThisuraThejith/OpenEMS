/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.itp.openems.ui;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import org.itp.commons.Constants;
import org.itp.commons.DBConnect;
import org.itp.commons.Queries;
import org.itp.commons.Validation;

/**
 *
 * @author THISURA THEJITH
 */
public class Appraisals extends javax.swing.JFrame {

    /**
     * Creates new form Appraisals
     */
    public Appraisals() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        gradingCmb = new javax.swing.JComboBox<>();
        bonusTxt = new javax.swing.JTextField();
        reviewsTxt = new javax.swing.JTextField();
        updateBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        nicTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        nicLbl = new javax.swing.JLabel();
        insertBtn = new javax.swing.JButton();
        gradingLbl = new javax.swing.JLabel();
        bonusLbl = new javax.swing.JLabel();
        reviewsLbl = new javax.swing.JLabel();
        demoBtn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Appraisals");

        jLabel1.setText("NIC No");

        jLabel2.setText("Grading");

        jLabel3.setText("Bonus");

        jLabel5.setText("Reviews");

        gradingCmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Select--", "1", "2", "3", "4", "5" }));

        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });

        backBtn.setText("Back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        searchBtn.setText("Search");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });

        insertBtn.setText("Insert");
        insertBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                insertBtnActionPerformed(evt);
            }
        });

        demoBtn.setText("Demo");
        demoBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                demoBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(demoBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(insertBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(updateBtn)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(backBtn)
                .addGap(18, 18, 18))
            .addGroup(layout.createSequentialGroup()
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel5, javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING))
                .addGap(41, 41, 41)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(nicLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(gradingCmb, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(nicTxt)
                            .addComponent(bonusTxt, javax.swing.GroupLayout.DEFAULT_SIZE, 157, Short.MAX_VALUE)
                            .addComponent(reviewsTxt)
                            .addComponent(gradingLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(bonusLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(searchBtn)
                                .addGap(0, 72, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(reviewsLbl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(nicTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchBtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(nicLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(gradingCmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addGap(5, 5, 5)
                .addComponent(gradingLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bonusTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(bonusLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(reviewsTxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(reviewsLbl, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 18, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(updateBtn)
                    .addComponent(backBtn)
                    .addComponent(insertBtn)
                    .addComponent(demoBtn))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_backBtnActionPerformed
    int employeeID = 0;
    int appraisalID = 0;
    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        nicLbl.setText(null);
        clear();
        if (nicTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter the NIC No", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            try {
                if (!Validation.ValidNIC(this.nicTxt.getText())) {
                    nicLbl.setText("*Invalid NIC No");
                    JOptionPane.showMessageDialog(null, "The NIC No is invalid", "Error", JOptionPane.ERROR_MESSAGE);
                } else if (Validation.ValidNIC(this.nicTxt.getText())) {
                    clear();
                    Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                    PreparedStatement preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_EMPLOYEE_ID_BY_NIC);
                    preparedStatement.setString(1, this.nicTxt.getText());
                    ResultSet resultset = preparedStatement.executeQuery();
                    int count = 0;
                    while (resultset.next()) {
                        employeeID = resultset.getInt("EmployeeID");
                        count++;
                    }
                    if (count == 0) {
                        JOptionPane.showMessageDialog(null, "An employee with this NIC No is not present", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    resultset.close();
                    preparedStatement.close();
                    connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                    preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_APPRAISAL_BY_EMPLOYEE_ID);
                    preparedStatement.setInt(1, employeeID);
                    resultset = preparedStatement.executeQuery();
                    int count1 = 0;
                    while (resultset.next()) {
                        this.gradingCmb.setSelectedItem(resultset.getString("Grading"));
                        this.bonusTxt.setText(resultset.getString("Bonus"));
                        this.reviewsTxt.setText(resultset.getString("Reviews"));
                        count1++;
                    }
                    if (count1 == 0) {
                        JOptionPane.showMessageDialog(null, "An appraisal for this employee is not present", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                    resultset.close();
                    preparedStatement.close();
                }

            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        nicLbl.setText(null);
        gradingLbl.setText(null);
        
        if (nicTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No employee to update", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (bonusTxt.getText().isEmpty() || gradingCmb.getSelectedItem().toString().equals("--Select--")) {
            JOptionPane.showMessageDialog(null, "Please press the search button to load appraisal details", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (!Validation.ValidDigits(this.bonusTxt.getText())) {
            bonusLbl.setText("*Invalid bonus");
            JOptionPane.showMessageDialog(null, "The bonus is invalid", "Error", JOptionPane.ERROR_MESSAGE);
        } else if (Double.parseDouble(this.bonusTxt.getText()) < 0) {
            JOptionPane.showMessageDialog(null, "Bonus cannot be negative", "Error", JOptionPane.ERROR_MESSAGE);
        } else {
            gradingLbl.setText(null);
            bonusLbl.setText(null);
            try {
                Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                PreparedStatement preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_EMPLOYEE_ID_BY_NIC);
                preparedStatement.setString(1, this.nicTxt.getText());
                ResultSet resultset = preparedStatement.executeQuery();
                int count = 0;
                while (resultset.next()) {
                    employeeID = resultset.getInt("EmployeeID");
                    count++;
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(null, "You haven't pressed the search button.An employee with this NIC No doesn't exist", "Error", JOptionPane.ERROR_MESSAGE);
                    clear();
                    return;
                }
                connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_APPRAISAL_ID_BY_EMPLOYEE_ID);
                preparedStatement.setInt(1, employeeID);
                resultset = preparedStatement.executeQuery();
                int count1 = 0;
                while (resultset.next()) {
                    appraisalID = resultset.getInt("AppraisalID");
                    count1++;
                }
                if (count1 == 0) {
                    JOptionPane.showMessageDialog(null, "Can't update a non-existing record", "Error", JOptionPane.ERROR_MESSAGE);
                    clear();
                    return;
                }

                resultset.close();
                preparedStatement.close();
                connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                preparedStatement = connect.prepareStatement(Queries.EMS.Update.APPRAISAL);
                preparedStatement.setString(1, this.gradingCmb.getSelectedItem().toString());
                preparedStatement.setString(2, this.bonusTxt.getText());
                preparedStatement.setString(3, this.reviewsTxt.getText());
                preparedStatement.setInt(4, employeeID);
                int affectedRows = preparedStatement.executeUpdate();
                System.out.println("affected rows=" + affectedRows);
                preparedStatement.close();
                JOptionPane.showMessageDialog(null, "Updated Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                nicTxt.setText(null);
                clear();
            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_updateBtnActionPerformed

    private void insertBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_insertBtnActionPerformed
        nicLbl.setText(null);
        gradingLbl.setText(null);
        if (nicTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No employee to insert the appraisal", "Error", JOptionPane.ERROR_MESSAGE);
            clear();
            return;
        } else if (!Validation.ValidNIC(this.nicTxt.getText())) {
            nicLbl.setText("*Invalid NIC No");
            JOptionPane.showMessageDialog(null, "The NIC No is invalid", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        else {
            gradingLbl.setText(null);
            bonusLbl.setText(null);
            try {
                Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                PreparedStatement preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_EMPLOYEE_ID_BY_NIC);
                preparedStatement.setString(1, this.nicTxt.getText());
                ResultSet resultset = preparedStatement.executeQuery();
                int count = 0;
                while (resultset.next()) {
                    employeeID = resultset.getInt("EmployeeID");
                    count++;
                }
                if (count == 0) {
                    JOptionPane.showMessageDialog(null, "An employee with this NIC No is not registered", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                resultset.close();
                preparedStatement.close();
                
                connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_APPRAISAL_ID_BY_EMPLOYEE_ID);
                preparedStatement.setInt(1, employeeID);
                resultset = preparedStatement.executeQuery();
                int count1 = 0;
                while (resultset.next()) {
                    appraisalID = resultset.getInt("AppraisalID");
                    count1++;
                }
                if (count1 != 0) {
                    JOptionPane.showMessageDialog(null, "This employee already has an appraisal ", "Error", JOptionPane.ERROR_MESSAGE);
                    nicLbl.setText(null);
                    gradingLbl.setText(null);
                    return;
                }

                resultset.close();
                preparedStatement.close();

                connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_EMPLOYEE_ID_BY_NIC);
                preparedStatement.setString(1, this.nicTxt.getText());
                resultset = preparedStatement.executeQuery();
                int count2 = 0;
                while (resultset.next()) {
                    employeeID = resultset.getInt("EmployeeID");
                    count2++;
                }
                resultset.close();
                preparedStatement.close();
                if (gradingCmb.getSelectedItem().toString().equals("--Select--")) {
                    gradingLbl.setText("*Select a grading");
                }
                if (bonusTxt.getText().isEmpty()) {
                    bonusLbl.setText("*Insert the bonus amount");
                }
                if (bonusTxt.getText().isEmpty()||gradingCmb.getSelectedItem().toString().equals("--Select--")){
                    JOptionPane.showMessageDialog(null, "You havent inserted the grading or bonus of this employee", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                else if (Double.parseDouble(this.bonusTxt.getText()) < 0) {
                    JOptionPane.showMessageDialog(null, "Bonus cannot be negative", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                preparedStatement = connect.prepareStatement(Queries.EMS.Insert.APPRAISALS);
                preparedStatement.setInt(1, employeeID);
                preparedStatement.setString(2, this.gradingCmb.getSelectedItem().toString());
                preparedStatement.setString(3, this.bonusTxt.getText());
                preparedStatement.setString(4, this.reviewsTxt.getText());

                int affectedRows = preparedStatement.executeUpdate();
                System.out.println("affected rows=" + affectedRows);
                preparedStatement.close();
                JOptionPane.showMessageDialog(null, "Inserted Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                clear();
            } catch (SQLException e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_insertBtnActionPerformed

    private void demoBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_demoBtnActionPerformed
        this.nicTxt.setText("942811110v");
    }//GEN-LAST:event_demoBtnActionPerformed
    private void clear() {
        gradingCmb.setSelectedItem("--Select--");
        reviewsTxt.setText(null);
        bonusTxt.setText(null);
        nicLbl.setText(null);

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Appraisals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Appraisals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Appraisals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Appraisals.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Appraisals().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel bonusLbl;
    private javax.swing.JTextField bonusTxt;
    private javax.swing.JButton demoBtn;
    private javax.swing.JComboBox<String> gradingCmb;
    private javax.swing.JLabel gradingLbl;
    private javax.swing.JButton insertBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel nicLbl;
    private javax.swing.JTextField nicTxt;
    private javax.swing.JLabel reviewsLbl;
    private javax.swing.JTextField reviewsTxt;
    private javax.swing.JButton searchBtn;
    private javax.swing.JButton updateBtn;
    // End of variables declaration//GEN-END:variables
}
