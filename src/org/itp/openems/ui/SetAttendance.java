/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.itp.openems.ui;


import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.DefaultCellEditor;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import javax.swing.table.TableColumn;
import org.itp.commons.Constants;
import org.itp.commons.DBConnect;
import org.itp.commons.Queries;
import org.itp.openems.model.Attendance;

/**
 *
 * @author THISURA THEJITH
 */
public class SetAttendance extends javax.swing.JFrame {

    /**
     * Creates new form SetAttendance
     */
    public SetAttendance() {
        initComponents();
        Date date = new Date();
        workDateDc.setDate(date);
        loadTableforAttendance();

    }

    private void setAttendanceCombo() {
        TableColumn presenceColumn = attendanceTable.getColumnModel().getColumn(3);
        JComboBox comboBox = new JComboBox();
        comboBox.addItem("Present");
        comboBox.addItem("Absent");
        comboBox.addItem("HalfDay");
        presenceColumn.setCellEditor(new DefaultCellEditor(comboBox));
        presenceColumn.setCellRenderer(new ComboRenderer(new String[]{"Present", "Absent", "HalfDay"}));
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The
     * content of this method is always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        saveBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        attendanceTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        workDateDc = new com.toedter.calendar.JDateChooser();
        jLabel2 = new javax.swing.JLabel();
        searchTxt = new javax.swing.JTextField();
        searchBtn = new javax.swing.JButton();
        markattBtn = new javax.swing.JButton();
        updateBtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Set Attendance");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        saveBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        saveBtn.setText("Save");
        saveBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveBtnActionPerformed(evt);
            }
        });
        getContentPane().add(saveBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(441, 366, -1, 31));

        backBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        backBtn.setText("Back");
        backBtn.setName("backBtn"); // NOI18N
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });
        getContentPane().add(backBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(589, 367, -1, 30));

        attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "EmployeeID", "Employee Name", "Presence"
            }
        ));
        attendanceTable.setRowHeight(20);
        jScrollPane1.setViewportView(attendanceTable);

        getContentPane().add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 141, 581, 219));

        jLabel1.setText("Work  Date");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(71, 86, -1, -1));

        workDateDc.setDateFormatString("yyyy-MM-dd");
        getContentPane().add(workDateDc, new org.netbeans.lib.awtextra.AbsoluteConstraints(135, 86, 142, -1));

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/itp/image/log.png"))); // NOI18N
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(95, 11, 469, 64));

        searchTxt.setToolTipText("EmployeeID or Employee Name");
        getContentPane().add(searchTxt, new org.netbeans.lib.awtextra.AbsoluteConstraints(283, 86, 119, -1));

        searchBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        searchBtn.setText("Search");
        searchBtn.setToolTipText("Delete the non searching field");
        searchBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchBtnActionPerformed(evt);
            }
        });
        getContentPane().add(searchBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(412, 86, -1, 31));

        markattBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        markattBtn.setText("Mark Attendance");
        markattBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                markattBtnActionPerformed(evt);
            }
        });
        getContentPane().add(markattBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(489, 86, -1, 31));

        updateBtn.setFont(new java.awt.Font("Times New Roman", 1, 14)); // NOI18N
        updateBtn.setText("Update");
        updateBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateBtnActionPerformed(evt);
            }
        });
        getContentPane().add(updateBtn, new org.netbeans.lib.awtextra.AbsoluteConstraints(508, 366, -1, 31));

        jLabel3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/org/itp/image/b2.jpg"))); // NOI18N
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 740, 510));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        this.dispose();
    }//GEN-LAST:event_backBtnActionPerformed

    private void saveBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveBtnActionPerformed
        int rowCount = attendanceTable.getRowCount();

        if (((JTextField) workDateDc.getDateEditor().getUiComponent()).getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Work Date cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            try {
                int EmpID = 0;
                Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                PreparedStatement preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_WORK_DATE);
                preparedStatement.setString(1, ((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText());
                ResultSet resultset = preparedStatement.executeQuery();
                int count = 0;
                while (resultset.next()) {
                    EmpID = resultset.getInt("EmpID");
                    count++;
                }
                if (count != 0) {
                    JOptionPane.showMessageDialog(null, "Attendance details of this work date has already been added", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                resultset.close();
                preparedStatement.close();
                for (int row = 0; row < rowCount; row++) {

                    connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                    preparedStatement = connect.prepareStatement(Queries.EMS.Insert.ATTENDANCE);
                    preparedStatement.setString(1, attendanceTable.getValueAt(row, 0).toString());
                    preparedStatement.setString(2, ((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText());
                    preparedStatement.setString(3, attendanceTable.getValueAt(row, 3).toString());

                    int affectedRows = preparedStatement.executeUpdate();
                    System.out.println("affected rows=" + affectedRows);
                    preparedStatement.close();

                }
                JOptionPane.showMessageDialog(null, "Added Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                //this.dispose();

            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_saveBtnActionPerformed

    private void markattBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_markattBtnActionPerformed
        if(((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText().isEmpty()){
            JOptionPane.showMessageDialog(null, "Please select a date to mark attendance", "Error", JOptionPane.ERROR_MESSAGE);
        }
        else{
            searchTxt.setText(null);
            loadTableforAttendance();
        }

    }//GEN-LAST:event_markattBtnActionPerformed

    private void searchBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchBtnActionPerformed
        if (((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText().isEmpty() && searchTxt.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please set a keyword to search", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        } else if (!((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText().isEmpty() && !searchTxt.getText().isEmpty()) {
            searchTableLoad(Queries.EMS.Select.SEARCH_ATTENDANCE_TOGETHER);
        } else {
            searchTableLoad(Queries.EMS.Select.SEARCH_ATTENDANCE_SEPERATE);

        }
    }//GEN-LAST:event_searchBtnActionPerformed

    private void updateBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateBtnActionPerformed
        int rowCount = attendanceTable.getRowCount();

        if (((JTextField) workDateDc.getDateEditor().getUiComponent()).getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Work Date cannot be empty", "Error", JOptionPane.ERROR_MESSAGE);
        } else {

            try {
                
                for (int row = 0; row < rowCount; row++) {

                    Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
                    PreparedStatement preparedStatement = connect.prepareStatement(Queries.EMS.Update.ATTENDANCE_UPDATE);
                    
                    preparedStatement.setString(1, attendanceTable.getValueAt(row, 3).toString());
                    preparedStatement.setString(2, attendanceTable.getValueAt(row, 0).toString());
                    preparedStatement.setString(3, ((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText());

                    int affectedRows = preparedStatement.executeUpdate();
                    System.out.println("affected rows=" + affectedRows);
                    preparedStatement.close();

                }
                JOptionPane.showMessageDialog(null, "Updated Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
                //this.dispose();

            } catch (Exception e) {
                System.out.println(e);
            }
        }
    }//GEN-LAST:event_updateBtnActionPerformed
    public void loadTableforAttendance() {
        Map<Integer, Attendance> records = new HashMap<Integer, Attendance>();

        try {
            boolean shouldUpdate = false;
            Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
            PreparedStatement preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_ATTENDANCE_FOR_DATE);
            String workDate = ((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText();
            preparedStatement.setString(1, workDate );
            ResultSet resultset = preparedStatement.executeQuery();
            while (resultset.next()) {
                Attendance attendance = new Attendance();
                attendance.setEmployeeID(resultset.getInt("EmpID"));
                attendance.setFirstName(resultset.getString("First_Name"));
                attendance.setLastName(resultset.getString("Last_Name"));
                attendance.setWorkDate(resultset.getString("Work_Date"));
                attendance.setPresence(resultset.getString("Presence"));
                records.put(attendance.getEmployeeID(), attendance);
                shouldUpdate = true;
            }
            if (shouldUpdate) {
                updateBtn.setEnabled(true);
                saveBtn.setEnabled(false);
            } else {
                updateBtn.setEnabled(false);
                saveBtn.setEnabled(true);
            }
            preparedStatement.close();
            
            preparedStatement = connect.prepareStatement(Queries.EMS.Select.GET_ACTIVE_EMPLOYEES_LIST);
            resultset = preparedStatement.executeQuery();
            while (resultset.next()) {
                if (!records.keySet().contains(resultset.getInt("EmployeeID"))) {
                    Attendance attendance = new Attendance();
                    attendance.setEmployeeID(resultset.getInt("EmployeeID"));
                    attendance.setFirstName(resultset.getString("First_Name"));
                    attendance.setLastName(resultset.getString("Last_Name"));
                    attendance.setWorkDate(workDate);
                    attendance.setPresence("Present");
                    records.put(attendance.getEmployeeID(), attendance);
                }
            }
            preparedStatement.close();
            Object[][] tableContent = new Object[records.size()][4];
            int index = 0;
            for (Integer key : records.keySet()) {
                tableContent[index][0] = key;
                tableContent[index][1] = records.get(key).getFirstName() + " " + records.get(key).getLastName();
                tableContent[index][2] = records.get(key).getWorkDate();
                tableContent[index][3] = records.get(key).getPresence();
                index++;
            }
            attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
                    tableContent, new String[]{"EmployeeID", "Employee Name", "Work Date", "Presence"}));
            setAttendanceCombo();

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void searchTableLoad(String sqlQuery) {
        List<Attendance> records = new ArrayList<Attendance>();
        //Map<String,String> attendance = new HashMap<String, String>();

        try {
            Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
            PreparedStatement preparedStatement = connect.prepareStatement(sqlQuery);

            preparedStatement.setString(1, ((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText());
            String keyword = searchTxt.getText();
            if ("".equals(keyword)) {
                keyword = "&*(";

            }
            preparedStatement.setString(2, "%" + keyword + "%");
            preparedStatement.setString(3, "%" + keyword + "%");
            preparedStatement.setString(4, "%" + keyword + "%");
            ResultSet resultset = preparedStatement.executeQuery();
            while (resultset.next()) {
                Attendance attendance = new Attendance();
                attendance.setEmployeeID(resultset.getInt("EmpID"));
                attendance.setFirstName(resultset.getString("First_Name"));
                attendance.setLastName(resultset.getString("Last_Name"));
                attendance.setWorkDate(resultset.getString("Work_Date"));
                attendance.setPresence(resultset.getString("Presence"));
                records.add(attendance);
            }
            preparedStatement.close();
            Object[][] tableContent = new Object[records.size()][4];
            int index = 0;
            for (Attendance attendance : records) {
                tableContent[index][0] = attendance.getEmployeeID();
                tableContent[index][1] = attendance.getFirstName() + " " + attendance.getLastName();
                tableContent[index][2] = attendance.getWorkDate();
                tableContent[index][3] = attendance.getPresence();
                index++;
            }
            attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
                    tableContent, new String[]{"EmployeeID", "Employee Name", "Work Date", "Presence"}));
            setAttendanceCombo();
            saveBtn.setEnabled(false);
            updateBtn.setEnabled(true);

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void searchTableLoadSepDate(String sqlQuery) {
        Map<String, String> records = new HashMap<String, String>();
        Map<String, String> attendance = new HashMap<String, String>();

        try {
            Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
            PreparedStatement preparedStatement = connect.prepareStatement(sqlQuery);

            preparedStatement.setString(1, ((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText());
            ResultSet resultset = preparedStatement.executeQuery();
            while (resultset.next()) {
                records.put(resultset.getString("EmpID"), resultset.getString("First_Name") + " " + resultset.getString("Last_Name"));
                attendance.put(resultset.getString("EmpID"), resultset.getString("Presence"));
            }
            preparedStatement.close();
            Object[][] tableContent = new Object[records.size()][4];
            int index = 0;
            for (String key : records.keySet()) {
                tableContent[index][0] = key;
                tableContent[index][1] = records.get(key);
                tableContent[index][2] = ((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText();
                tableContent[index][3] = attendance.get(key);
                index++;
            }
            attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
                    tableContent, new String[]{"EmployeeID", "Employee Name", "Work Date", "Presence"}));
            setAttendanceCombo();

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void searchTableLoadSepKey(String sqlQuery) {
        Map<String, String> records = new HashMap<String, String>();
        Map<String, String> attendance = new HashMap<String, String>();

        try {
            Connection connect = new DBConnect(Constants.USER, Constants.PASSWORD).getConnection();
            PreparedStatement preparedStatement = connect.prepareStatement(sqlQuery);

            preparedStatement.setString(1, "%" + searchTxt.getText() + "%");
            preparedStatement.setString(2, "%" + searchTxt.getText() + "%");
            preparedStatement.setString(3, "%" + searchTxt.getText() + "%");
            ResultSet resultset = preparedStatement.executeQuery();
            while (resultset.next()) {
                records.put(resultset.getString("EmpID"), resultset.getString("First_Name") + " " + resultset.getString("Last_Name"));
                attendance.put(resultset.getString("EmpID"), resultset.getString("Presence"));
            }
            preparedStatement.close();
            Object[][] tableContent = new Object[records.size()][4];
            int index = 0;
            for (String key : records.keySet()) {
                tableContent[index][0] = key;
                tableContent[index][1] = records.get(key);
                tableContent[index][2] = ((JTextField) this.workDateDc.getDateEditor().getUiComponent()).getText();
                tableContent[index][3] = attendance.get(key);
                index++;
            }
            attendanceTable.setModel(new javax.swing.table.DefaultTableModel(
                    tableContent, new String[]{"EmployeeID", "Employee Name", "Work Date", "Presence"}));
            setAttendanceCombo();

        } catch (Exception e) {
            System.out.println(e);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SetAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SetAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SetAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SetAttendance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SetAttendance().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable attendanceTable;
    private javax.swing.JButton backBtn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton markattBtn;
    private javax.swing.JButton saveBtn;
    private javax.swing.JButton searchBtn;
    private javax.swing.JTextField searchTxt;
    private javax.swing.JButton updateBtn;
    private com.toedter.calendar.JDateChooser workDateDc;
    // End of variables declaration//GEN-END:variables
}
